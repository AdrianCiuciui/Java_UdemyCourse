   // Numbers to words challange ---------------------------------------------------
   
   public static int reverse (int number) {
    int number2 = 0;
    boolean negativeNumber = false;
    if (number < 0) {
        number *= -1;
        negativeNumber= true;
    }
        while (number > 0) {
        number2 *= 10;
        number2 = number2 + number % 10;
        number /= 10;
            }
    if (negativeNumber) return (number2 * -1);
    return number2;
    }

    public static int getDigitCount (int number) {
        if (number < 0) return -1;
        int count = 0;
        if (number == 0) return 1;
        while (number > 0) {
            count += 1;
            number /= 10;
        }
        return count;
    }

    public static void numberToWords (int number) {
        if (number < 0) System.out.println ("Invalid Value");
        if (number == 0) System.out.println ("Zero");
        int reversedNumber = reverse (number);
        while (reversedNumber > 0) {
            int digit = reversedNumber % 10;
            switch (digit) {
                case 0:
                    System.out.println ("Zero");  break;
                case 1:
                    System.out.println ("One");  break;
                case 2:
                    System.out.println ("Two"); break;
                case 3:
                    System.out.println ("Three");break;
                case 4:
                    System.out.println ("Four"); break;
                case 5:
                    System.out.println ("Five"); break;
                case 6:
                    System.out.println ("Six"); break;
                case 7:
                    System.out.println ("Seven");break;
                case 8:
                    System.out.println ("Eight");break;
                case 9:
                    System.out.println ("Nine");break;
            }
            reversedNumber /= 10;
        }
        if (getDigitCount (number) != getDigitCount (reverse (number))) {
            int count = getDigitCount (number) - getDigitCount (reverse (number));
            while (count > 0) {
                System.out.println ("Zero");
                count--;
            }
        }

    }

//    Verifys if GOAL can be achieved using the available sacks (or counts, according to the int naming) ----------------
//      bigCount stands for 5 kg, smallCount stands for 1 kg  -----------------------------------------------------------

    public static boolean canPack (int bigCount, int smallCount, int goal) {
        if (bigCount < 0 || smallCount < 0 || goal <= 0) {
            System.out.println ("A number is of negative value");
            return false;
        }
        if (goal >= 5) {
            while (bigCount > 0 && goal >= 5) {
                goal -= 5;
                bigCount--;
            }}
        if (goal > 0) {
            while (smallCount > 0 && goal > 0) {
                goal -= 1;
                smallCount--;
            }}
        return (goal == 0);
    }


// This method will find out the largest prime number of an entered number ----------------------------

    public static int getLargestPrime (int number) {
        if (number < 2) return -1;
        int largestPrime = 0;
        for (int i = 1; i <= number; i++) {
            boolean aPrimeIsFound = false;
            for (int j = 2; j < i;j++) {
                if (i % j == 0) aPrimeIsFound = true;
            }
            if ((number % i == 0) && (!aPrimeIsFound)) largestPrime = i;
        }
        return largestPrime;
    }
